# Load necessary libraries
library(pROC)
library(boot)
library(caret)
library(ggplot2)
library(viridis)

# Fit multiple survival models
surv_models <- list(
  surv_model_0_risk = coxph(Surv(time_DEMENTIA, DEMENTIA) ~ age + sex + race + education_yr + apoe4 + cog_mem, data = imputed_data),
  surv_model_1_risk = coxph(Surv(time_DEMENTIA, DEMENTIA) ~ NEFL, data = imputed_data),
  surv_model_2_risk = coxph(Surv(time_DEMENTIA, DEMENTIA) ~ NEFL + age + sex + race + education_yr, data = imputed_data),
  surv_model_3_risk = coxph(Surv(time_DEMENTIA, DEMENTIA) ~ NEFL + age + sex + race + education_yr + apoe4, data = imputed_data),
  surv_model_4_risk = coxph(Surv(time_DEMENTIA, DEMENTIA) ~ NEFL + age + sex + race + education_yr + apoe4 + cog_mem, data = imputed_data),
  surv_model_5_risk = coxph(Surv(time_DEMENTIA, DEMENTIA) ~ RPS6KB1, data = imputed_data),
  surv_model_6_risk = coxph(Surv(time_DEMENTIA, DEMENTIA) ~ RPS6KB1 + age + sex + race + education_yr, data = imputed_data),
  surv_model_7_risk = coxph(Surv(time_DEMENTIA, DEMENTIA) ~ RPS6KB1 + age + sex + race + education_yr + apoe4, data = imputed_data),
  surv_model_8_risk = coxph(Surv(time_DEMENTIA, DEMENTIA) ~ RPS6KB1 + age + sex + race + education_yr + apoe4 + cog_mem, data = imputed_data),
  surv_model_9_risk = coxph(Surv(time_DEMENTIA, DEMENTIA) ~ NEFL + RPS6KB1 + age + sex + race + education_yr + apoe4 + cog_mem, data = imputed_data)
)

# Predict linear predictor for each model
surv_preds <- lapply(surv_models, predict, type = "risk")

# Create ROC curves for each model
roc_curves <- lapply(surv_preds, function(pred) roc(response = imputed_data$DEMENTIA, predictor = pred))

# Extract coordinates for plotting
roc_data_list <- lapply(1:length(roc_curves), function(i) {
  data.frame(
    specificity = roc_curves[[i]]$specificities,
    sensitivity = roc_curves[[i]]$sensitivities,
    model = paste0("Model ", i)
  )
})

# Combine all ROC data into a single data frame
roc_data <- do.call(rbind, roc_data_list)

# Calculate AUC values
auc_values <- sapply(roc_curves, auc)

# Define a custom color palette
color_palette <- viridis_pal()(length(surv_models))
 s
# Plot ROC curves for all models
roc_plot <- ggplot() +
  geom_line(data = roc_data_list[[1]], aes(x = 1 - specificity, y = sensitivity, color = "Model 0: demographics + apoe 4 + memory score only"), size = 1) +
  geom_line(data = roc_data_list[[2]], aes(x = 1 - specificity, y = sensitivity, color = "Model 1: NEFL only"), size = 1) +
  geom_line(data = roc_data_list[[3]], aes(x = 1 - specificity, y = sensitivity, color = "Model 2: NEFL + demographics"), size = 1) +
  geom_line(data = roc_data_list[[4]], aes(x = 1 - specificity, y = sensitivity, color = "Model 3: NEFL + demographics + apoe 4"), size = 1) +
  geom_line(data = roc_data_list[[5]], aes(x = 1 - specificity, y = sensitivity, color = "Model 4: NEFL + demographics + apoe 4 + memory score"), size = 1) +
  geom_line(data = roc_data_list[[6]], aes(x = 1 - specificity, y = sensitivity, color = "Model 5: RPS6KB1 only"), size = 1) +
  geom_line(data = roc_data_list[[7]], aes(x = 1 - specificity, y = sensitivity, color = "Model 6: RPS6KB1 + demographics"), size = 1) +
  geom_line(data = roc_data_list[[8]], aes(x = 1 - specificity, y = sensitivity, color = "Model 7: RPS6KB1 + demographics + apoe 4"), size = 1) +
  geom_line(data = roc_data_list[[9]], aes(x = 1 - specificity, y = sensitivity, color = "Model 8: RPS6KB1 + demographics + apoe 4 + memory score"), size = 1) +
  geom_line(data = roc_data_list[[10]], aes(x = 1 - specificity, y = sensitivity, color = "Model 9: NEFL + RPS6KB1 + demographics + apoe 4 + memory score"), size = 1) +
  geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "red") + 
  geom_text(aes(x = 0.9, y = 0.22, label = paste("AUC Model 0:", round(auc_values[1], 3))), color = "black", vjust = -1, size = 5) +
  geom_text(aes(x = 0.9, y = 0.20, label = paste("AUC Model 1:", round(auc_values[2], 3))), color = "black", vjust = -1, size = 5) +
  geom_text(aes(x = 0.9, y = 0.18, label = paste("AUC Model 2:", round(auc_values[3], 3))), color = "black", vjust = -1, size = 5) +
  geom_text(aes(x = 0.9, y = 0.16, label = paste("AUC Model 3:", round(auc_values[4], 3))), color = "black", vjust = -1, size = 5) +
  geom_text(aes(x = 0.9, y = 0.14, label = paste("AUC Model 4:", round(auc_values[5], 3))), color = "black", vjust = -1, size = 5) +
  geom_text(aes(x = 0.9, y = 0.12, label = paste("AUC Model 5:", round(auc_values[6], 3))), color = "black", vjust = -1, size = 5) +
  geom_text(aes(x = 0.9, y = 0.10, label = paste("AUC Model 6:", round(auc_values[7], 3))), color = "black", vjust = -1, size = 5) +
  geom_text(aes(x = 0.9, y = 0.08, label = paste("AUC Model 7:", round(auc_values[8], 3))), color = "black", vjust = -1, size = 5) +
  geom_text(aes(x = 0.9, y = 0.06, label = paste("AUC Model 8:", round(auc_values[9], 3))), color = "black", vjust = -1, size = 5) +
  geom_text(aes(x = 0.9, y = 0.04, label = paste("AUC Model 9:", round(auc_values[10], 3))), color = "black", vjust = -1, size = 5) +
  labs(
    title = "",
    subtitle = "",
    x = "False Positive Rate",
    y = "True Positive Rate",
    color = "Model"
  ) +
  theme_minimal(base_family = "sans") +
  scale_color_manual(values = color_palette) +  # Set custom color palette
  theme(panel.background = element_rect(fill="white",colour="black"),
        plot.background = element_rect(fill="white",colour=NA),
    legend.text = element_text(size = 12),  # Legend text size
    axis.title.x = element_text(size = 15),  # X-axis label size
    axis.title.y = element_text(size = 15),  # Y-axis label size
    axis.text.x = element_text(size = 15),   # X-axis tick label size
    axis.text.y = element_text(size = 15)    # Y-axis tick label size
  )

# Print the ROC plot
print(roc_plot)

ggsave("C:/Users/jessy/OneDrive - University College London/Desktop/ELSA/Olink proteomics data/Results/roc_plot.png", plot = roc_plot, width = 20, height = 10, dpi=300)

# Compute and print AUC with 95% CI
# Function to calculate AUC
calc_auc <- function(data, indices, predictor) {
  d <- data[indices, ]
  roc_obj <- roc(response = d$DEMENTIA, predictor = predictor[indices])
  return(auc(roc_obj))
}

# Data frame for bootstrapping
data_for_boot <- imputed_data

# Number of bootstrap replicates
n_replicates <- 2000

# Perform bootstrapping and compute 95% CI for each ROC curve
boot_results <- lapply(surv_preds, function(pred) {
  boot_obj <- boot(data_for_boot, statistic = calc_auc, R = n_replicates, predictor = pred)
  ci <- boot.ci(boot_obj, type = "perc")
  return(list(boot_obj = boot_obj, ci = ci))
})

# Print the 95% CI for each model
for (i in seq_along(boot_results)) {
  cat(sprintf("Model %d: 95%% CI for AUC = %0.3f to %0.3f\n", i, boot_results[[i]]$ci$percent[4], boot_results[[i]]$ci$percent[5]))
}

for (i in seq_along(auc_values)) {
  cat(sprintf("Model %d: AUC = %0.4f\n", i, auc_values[i]))
}
