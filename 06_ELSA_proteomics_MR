####CHUNK 1: LOAD R PACKAGES
library(tidyverse) 
library(dplyr)
library(tibble)
library(readr)
library(tidyr)

#if (!require("BiocManager")) install.packages("BiocManager")
#BiocManager::install("TwoSampleMR")

library(LDlinkR)      # LD and proxy snps
#install.packages("calibrate")
library(calibrate)

#BiocManager::install("MendelianRandomization", dependencies = TRUE, update = TRUE, force = TRUE)

library(MendelianRandomization)
library(TwoSampleMR)

###CHUCK 2: LOAD FUNCTIONS
# Define column types for summary statistics
coltypes = cols(
  ID = col_character(),
  CHROM = col_double(),
  POS = col_double(),
  REF = col_character(),
  ALT = col_character(),
  AF = col_double(),
  TRAIT = col_character(),
  BETA = col_double(),
  SE = col_double(),
  Z = col_double(),
  P = col_double(),
  N = col_double(),
  OR = col_double(),
  OR_L95 = col_double(),
  OR_U95 = col_double(),
  DIR = col_character(),
  G1000_ID = col_character(),
  G1000_VARIANT = col_character(),
  DBSNP_ID = col_character(),
  DBSNP_VARIANT = col_character(),
  OLD_ID = col_character(),
  OLD_VARIANT = col_character()
)

#FUNCTION FOR MUNGING LDlink OUTPUT
munge_proxies <- function(LDLink_file, outcome, outcome_clump){
  LDLink_file_path <- LDLink_file
  proxy_snps <- read_tsv(LDLink_file_path, skip = 1, col_names = F) %>%
    rename(id = X1, func = X2, proxy_snp = X3, coord = X4, alleles = X5, maf = X6, 
           distance = X7, dprime = X8, rsq = X9, correlated_alleles = X10, FORGEdb = X11, RegulomeDB = X12) %>%
    separate(coord, c('chr', 'pos'), sep = ":") %>%
    mutate(snp = ifelse(id == 1, proxy_snp, NA), 
           chr = str_replace(chr, 'chr', ""), 
           chr = as.numeric(chr), 
           pos = as.numeric(pos)) %>%
    fill(snp, .direction = 'down') %>%
    relocate(snp, .before = proxy_snp) %>%
    dplyr::select(-id, -func, -FORGEdb, -RegulomeDB) %>%
    filter(rsq >= 0.8)
  
  # Munge proxy snp and outcome data
  proxy_outcome <- left_join(
    proxy_snps, outcome, by = c("proxy_snp" = "SNP")
  ) %>%
    separate(correlated_alleles, c("target_a1.outcome", "proxy_a1.outcome", 
                                   "target_a2.outcome", "proxy_a2.outcome"), sep = ",|=") %>%
    filter(!is.na(chr.outcome)) %>%
    arrange(snp, -rsq, abs(distance)) %>%
    group_by(snp) %>%
    slice(1) %>%
    ungroup() %>%
    mutate(
      proxy.outcome = TRUE,
      target_snp.outcome = snp,
      proxy_snp.outcome = proxy_snp, 
    ) %>% 
    mutate(
      new_effect_allele.outcome = case_when(
        proxy_a1.outcome == effect_allele.outcome & proxy_a2.outcome == other_allele.outcome ~ target_a1.outcome,
        proxy_a2.outcome == effect_allele.outcome & proxy_a1.outcome == other_allele.outcome ~ target_a2.outcome,
        TRUE ~ NA_character_
      ), 
      new_other_allele.outcome = case_when(
        proxy_a1.outcome == effect_allele.outcome & proxy_a2.outcome == other_allele.outcome ~ target_a2.outcome,
        proxy_a2.outcome == effect_allele.outcome & proxy_a1.outcome == other_allele.outcome ~ target_a1.outcome,
        TRUE ~ NA_character_
      ), 
      effect_allele.outcome = new_effect_allele.outcome, 
      other_allele.outcome = new_other_allele.outcome
    ) %>%
    dplyr::select(-proxy_snp, -chr, -pos, -alleles, -maf, -distance, -rsq, -dprime,  
                  -new_effect_allele.outcome, -new_other_allele.outcome) %>%
    relocate(target_a1.outcome, proxy_a1.outcome, target_a2.outcome, proxy_a2.outcome, .after = proxy_snp.outcome) %>%
    rename(SNP = snp) %>%
    relocate(SNP, .after = samplesize.outcome)
  
  # Merge outcome and proxy outcomes
  outcome_dat <- bind_rows(
    outcome_clump, proxy_outcome
  ) %>% 
    arrange(chr.outcome, pos.outcome)
  
  outcome_dat
}

###CHUNK 3: LOAD EXPOSURE DATA
#Exposure data
exposure_ss<-readRDS("~path/NEFL_rsID.rds")

colnames(exposure_ss)  
exposure_ss$TRAIT<-"NEFL"
exposure_ss$BETA<-as.numeric(exposure_ss$BETA)
exposure_ss$SE<-as.numeric(exposure_ss$SE)
exposure_ss$A1FREQ<-as.numeric(exposure_ss$A1FREQ)
exposure_ss$N<-as.numeric(exposure_ss$N)
exposure_ss$LOG10P<-as.numeric(exposure_ss$LOG10P)

# Format data to TwoSampleMR format
exposure <- exposure_ss %>%
  format_data(.,
              type = "exposure",
              snps = NULL,
              header = TRUE,
              phenotype_col = "TRAIT",
              snp_col = "RSID",
              beta_col = "BETA",
              se_col = "SE",
              eaf_col = "A1FREQ",
              effect_allele_col = "ALLELE1",
              other_allele_col = "ALLELE0",
              pval_col = "LOG10P",
              samplesize_col = "N",
              z_col = "CHISQ",
              chr_col = "CHROM",
              pos_col = "GENPOS",
              log_pval = TRUE
  ) %>%
  as_tibble()

# Perform LD clumping on SNP data
exposure_clump <- exposure %>% 
  filter(pval.exposure < 5e-8) %>%
  clump_data(.,
             clump_kb = 10000,
             clump_r2 = 0.001,
             clump_p1 = 1,
             clump_p2 = 1,
             pop = "EUR"
  )

exposure_dat <- exposure_clump

###CHUNK 4: LOAD OUTCOME DATA
#Outcome data
finngen_dem <- "~path/summary_stats_finngen_R10_F5_DEMENTIA.txt"
outcome_ss<-finngen_dem

outcome_ss$TRAIT<-"All-cause dementia"
outcome_ss$BETA<-as.numeric(outcome_ss$beta)
outcome_ss$SE<-as.numeric(outcome_ss$sebeta)
outcome_ss$A1FREQ<-as.numeric(outcome_ss$af_alt)
outcome_ss$N<-as.numeric(407717)
outcome_ss$LOG10P<-as.numeric(outcome_ss$mlogp)
outcome_ss$ALLELE1<-outcome_ss$alt
outcome_ss$ALLELE0<-outcome_ss$ref
outcome_ss$CHROM<-outcome_ss$X.chrom
outcome_ss$GENPOS<-outcome_ss$pos
outcome_ss$RSID<-outcome_ss$rsids

head(outcome_ss)

# Format outcome
outcome <- outcome_ss %>%
  format_data(.,
              type = "outcome",
              snps = NULL,
              header = TRUE,
              phenotype_col = "TRAIT",
              snp_col = "RSID",
              beta_col = "BETA",
              se_col = "SE",
              eaf_col = "A1FREQ",
              effect_allele_col = "ALLELE1",
              other_allele_col = "ALLELE0",
              pval_col = "LOG10P",
              samplesize_col = "N",
              z_col = "CHISQ",
              chr_col = "CHROM",
              pos_col = "GENPOS",
              log_pval = TRUE
  ) %>%
  as_tibble()

rm(outcome_ss)

###CHUNK 5: LD Proxy SNPs
# extract exposure SNPs present in outcome
outcome_clump <- semi_join(
  outcome, exposure_dat, by = "SNP"
)

# Exposure SNPs not present in outomce
exp_snps_wo <- anti_join(
  exposure_dat, outcome, by = "SNP"
)

# Use LDLinkR to identify proxy snps
LDproxy_batch(exp_snps_wo$SNP, 
              pop = "EUR",             
              r2d = "r2", 
              token = 'a6deee62cc4a', 
              append = TRUE,           
              genome_build = "grch38") 

system("mv combined_query_snp_list_grch38.txt data/exposure_outcome_proxy_snps.txt")

# Munge proxy snp file
outcome_dat <- munge_proxies("~path/combined_query_snp_list_grch38.txt", outcome, outcome_clump)

outcome_dat = outcome_clump

###CHUNK 5: HARMONIZE EXPOSURE AND OUTCOME DATA
mr_dat <- harmonise_data(exposure_dat, outcome_dat, action = 2) %>% as_tibble() %>%
  mutate(
    apoe_region = case_when(
      chr.exposure == 19 & between(as.numeric(pos.exposure), 44407913,45408821) ~ TRUE,
      TRUE ~ FALSE
    ), 
    gws.outcome = ifelse(pval.outcome < 5e-8, TRUE, FALSE), 
    mr_keep = ifelse(mr_keep == FALSE | apoe_region == TRUE | gws.outcome == TRUE, FALSE, TRUE)
  )

head(mr_dat)

mr_dat<-subset(mr_dat, apoe_region==F)

###CHUNK 6: RUN MR ANALYSES
mr_het1 <- mr_heterogeneity(mr_dat)

# primary methods
res1 <- mr(mr_dat, method_list = c(
  "mr_ivw", "mr_egger_regression","mr_weighted_median", "mr_two_sample_ml", "mr_weighted_mode"), parameters = default_parameters())

# Egger intercept
mr_egger_int1 <- mr_pleiotropy_test(mr_dat)

# single SNP analyses
res1_single <- mr_singlesnp(mr_dat, all_method=c("mr_ivw", "mr_egger_regression", "mr_weighted_median", "mr_weighted_mode", "mr_two_sample_ml"))

# leave one out analyses
res1_loo <- mr_leaveoneout(mr_dat)

# Main results
res1
mr_het1
mr_egger_int1
res1_single
res1_loo

scatter_p <- mr_scatter_plot(res1, mr_dat)

p <- scatter_p[[1]] + 
  theme_bw() + 
  guides(color = guide_legend(ncol = 1)) + 
  labs(title = "NEFL on All-cause dementia in forward direction") +
  theme(
    text = element_text(size = 12)
  )
